<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>故障排查 on Linux</title>
    <link>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/</link>
    <description>Recent content in 故障排查 on Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lsof ( List Open Files)</title>
      <link>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/lsof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/lsof/</guid>
      <description>lsof ( List Open Files) FD  cwd： current work dirctory，应用程序的当前工作目录 txt ：进程程序代码 .u： 该文件被打开并处于 读/写 模式 .r： 该文件被打开并处于 只读模式   更多详见： man lsof
 TYPE  DIR：目录 REG：文件 IPv4：网际协议 (IP) 套接字 unix： UNIX 域套接字 KQUEUE： 内核时间队列   更多详见： man lsof
 案例 网络相关 # 列出所有的网络连接 $ lsof -i # 查看端口占用 $ lsof -i :8080 # 所有 TCP 网络连接信息 $ lsof -i tcp # 所有 UDP 网络连接信息 $ lsof -i udp 文件占用 # 打开 lsof.</description>
    </item>
    
    <item>
      <title>perf（CPU）</title>
      <link>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/perf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/perf/</guid>
      <description>perf 子命令列表 # 会输出所有的子命令 $ perf -h    命令 作用     record 收集采样信息，并将其记录在数据文件中   report 读取 perf record 创建的数据文件，并给出热点分析结果   timechart 针对测试期间系统行为进行可视化的工具   evlist 列出数据文件 perf.data 中所有性能事件。   list 列出当前系统支持的所有性能事件。包括硬件性能事件、软件性能事件以及检查点   top 类似于 top 命令，对系统性能进行实时分析       annotate 解析perf record生成的perf.data文件，显示被注释的代码。   archive 根据数据文件记录的build-id，将所有被采样到的elf文件打包。利用此压缩包，可以再任何机器上分析数据文件中记录的采样数据。   bench perf中内置的benchmark，目前包括两套针对调度器和内存管理子系统的benchmark。   buildid-cache 管理perf的buildid缓存，每个elf文件都有一个独一无二的buildid。buildid被perf用来关联性能数据与elf文件。   buildid-list 列出数据文件中记录的所有buildid。   diff 对比两个数据文件的差异。能够给出每个符号（函数）在热点分析上的具体差异。   inject 该工具读取perf record工具记录的事件流，并将其定向到标准输出。在被分析代码中的任何一点，都可以向事件流中注入其它事件。   kmem 针对内核内存（slab）子系统进行追踪测量的工具   kvm 用来追踪测试运行在KVM虚拟机上的Guest OS。   lock 分析内核中的锁信息，包括锁的争用情况，等待延迟等。   mem 内存存取情况   sched 针对调度器子系统的分析工具。   stat 执行某个命令，收集特定进程的性能概况，包括CPI、Cache丢失率等。   test perf对当前软硬件平台进行健全性测试，可用此工具测试当前的软硬件平台是否能支持perf的所有功能。   trace 关于syscall的工具。   probe 用于定义动态检查点    record -a 记录所有 CPU 事件 -o 指定录取保存数据的文件名，如：cycle.</description>
    </item>
    
    <item>
      <title>top</title>
      <link>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/top/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/top/</guid>
      <description>top 启动参数  -b 不启用交互模式，直接打印结果 -n &amp;lt;次数&amp;gt; 循环显示的次数（与-b配合会输出完成的进程列表） -i &amp;lt;时间&amp;gt; 设置间隔时间 -u &amp;lt;用户名&amp;gt; 指定用户名 -p &amp;lt;进程号&amp;gt; 指定进程 -H 显示线程  交互参数  h：[重要]帮助命令 &amp;lt;Space&amp;gt;：立即刷新 s：设置刷新时间间隔 c：显示命令完全模式 t:：显示或隐藏进程和CPU状态信息 m：显示或隐藏内存状态信息 l：显示或隐藏uptime信息 f：增加或减少进程显示标志 S：累计模式，会把已完成或退出的子进程占用的CPU时间累计到父进程的MITE+ P：按%CPU使用率排行 T：按MITE+排行 M：按%MEM排行 H：显示线程 u：指定显示用户进程 r：修改进程renice值 k： kill：进程 i：只显示正在运行的进程 W：保存对top的设置到文件~/.toprc，下次启动将自动调用toprc文件的设置 q：退出  Read More   Linux命令工具 top详解  Linux top命令详解和使用技巧  </description>
    </item>
    
    <item>
      <title>htop</title>
      <link>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/htop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/htop/</guid>
      <description>htop 安装 # 启用 EPEL Repository yum -y install epel-release yum -y update # 安装 htop yum -y install htop 输入 htop 即可使用，效果如下：
 Read More   官网
Linux htop工具使用详解
 </description>
    </item>
    
    <item>
      <title>mtr</title>
      <link>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/mtr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Linux/docs/200_Command/220_Troubleshooting/mtr/</guid>
      <description>mtr 常用的 ping，tracert，nslookup 一般用来判断主机的网络连通性，其实 Linux 下有一个更好用的网络联通性判断工具，它可以结合 ping、tracert、nslookup 来判断网络的相关特性，这个命令就是 mtr。mtr 全称 my traceroute，是一个把 ping 和 traceroute 合并到一个程序的网络诊断工具。
traceroute 默认使用UDP数据包探测，而mtr默认使用ICMP报文探测，ICMP在某些路由节点的优先级要比其他数据包低，所以测试得到的数据可能低于实际情况。
常用命令   无参数（mtr &amp;lt;host&amp;gt;）：会不停的发送 CMP报文 进行探测
  -r | -report : 会向主机发送 10 个 ICMP 包，然后直接输出结果
 一般情况下 mtr 前几跳都是本地 ISP，后几跳属于服务商比如 Google 数据中心，中间跳数则是中间节点，如果发现前几跳异常，需要联系本地 ISP 服务提供上，相反如果后几跳出现问题，则需要联系服务提供商，中间几跳出现问题，则两边无法完全解决问题
   -c： -r 参数来生成报告，只会发送10个数据包 ， 可以通过 -c 制定发送数据包的个数
  -s：定ping数据包的大小 ，如果设置为负数，则数据包大小是随机数
  统计项说明  Host：显示的是IP地址或本机域名 Loss% 到达此节点的数据包丢包率，显示的每个对应IP的丢包率（TODO） Snt 发送包的数量 Last 最后一包的返回延时 Avg 平均延时 Best 最低延时 Wrst 最差延时 StDev 方差（稳定性）  Read More   mtr 查看路由网络连通性  traviscross/mtr 工具： 在线 traceroute  </description>
    </item>
    
  </channel>
</rss>